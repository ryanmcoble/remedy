
-- LEGEND --
   ** = future
   *  = implemented


* 1  - Rate limit by different intervals (200 requests every 2 hours)
* 2  - Access levels (give privledge to certain api keys)
* 3  - Api Key authorization (X-Remedy-Auth header for api key)
**4  - HATEOAS (Hypermedia As The Engine Of Application State) - Everything that is needed is sent, href replace ids, though we keep them for backwards compatibility
* 5  - REST (Representational State Transfer)
**6  - JSON RPC (JavaScript Object Notation Remote Procedural Call) - For partial resource operations
* 7  - Versioned (current version is v1) - For future change
**8  - Batch call support - Underlying Shopify api calls will be handled in a queue (everything other than get)
**9  - Supports results in different formats - Currently only JSON is supported (future formats XML and binary)
*10  - Opinionated (in the best way) - made with sound design decisions that push good opinions on clients
*11  - Simple installation
     1 - Install Shopify Communicator app and receive your api key (multiple can be requested, in special cases)
     2 - Set X-Remedy-Auth header to your api key, for all api requests
*12  - Leverages caching database queries as well as Shopify api data
**13   - Forced method query parameter ( Ex: ?_method=post ) - Forces an HTTP method
**14   - Expand entity query parameter ( Ex: ?expand=shop ) - Also returns full child and parent entities
**15   - Paginated (Ex: ?offset=0&limit=25) - Also contains pagination entity in response
**16   - Body-less query parameter ( Ex: ?body=false ) - Specify response will contain only meta data
**17   - Filters query parameter ( Ex: ?filters= ) - Have not decided how I am going to implement filtering yet.
**18   - Field limitation query parameter ( Ex: ?fields=shopify_id,title,variants(shopify_id,title) ) - specifically get only the fields you need, by default most fields are not returned.
**19   - Resource extension ( Ex: /api/v1/products.json ) - specify the response format in the request url.
**20   - Implementation of ETag's and If-None-Match: "{ ETag value }" header, to check for modifications


Http notes (random)

401 "Unauthorized" really means Unauthenticated
403 "Forbidden" really meant Unauthorized
